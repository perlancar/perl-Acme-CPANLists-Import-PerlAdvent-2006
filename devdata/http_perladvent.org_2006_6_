<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2006 Perl Advent Calendar: Santa's Little Helper</title>
<link rev="made" href="mailto:jeff@zeroclue.com" />
<link rel="stylesheet" href="../style.css" type="text/css" /></head>

<body>
<h1><a href="../">Perl Advent Calendar 2006-12</a>-06</h1>
<h2 align="center">Santa's Little Helper</h2>
<h3 align="center">by Jeff Lavallee</h3>

<h4><a name="everyone_can_use_a_helping_hand">Everyone can use a helping hand</a></h4>
<p>
I'm sure even Santa's elves appreciate any head start they can get when they
start building a new toy, and
<tt><a href="http://search.cpan.org/search?module=Module::Starter">Module::Starter</a></tt>
is a great way to get a leg up when crafting a new Perl module.</p>

<h4><a name="what_is_it">What Is It?</a></h4>

<p><tt>Module::Starter</tt> is a little different from most Perl modules.
Typically, you wouldn't use it directly. When installed, it provides the
<tt>module-starter</tt> script. The script will create the basic framework
of a module suitable for distribution. If you're new to creating modules
for CPAN this can be a great help.</p>

<h4><a name="what_about_good_old_h2xs">What about good old h2xs?</a></h4>
<p><tt>h2xs</tt> predates <tt>Module::Starter</tt>, and is mainly designed to
get a head start when creating a module from C header files. It can be used to
create a pure-Perl module via the <tt>-X</tt> option, however the module
skeleton that it creates is not as complete as what is provided by
<tt>Module::Starter</tt>. <tt>h2xs</tt> also assumes that the module you're
creating will be based on Exporter, and its generated documentation also
requires significantly more editing.</p>

<h4><a name="a_few_options">A Few Options</a></h4>
<p><tt>module-starter</tt> accepts a few different options to control its
behavior. Here are a few of the most important:</p>
<dl>
<dt><tt>--module=module</tt>  Module name (<em>required</em>)
<dd>The name of the module you'd like to create.
<dt><tt>--author=name</tt> Author's name (<em>required</em>) &amp; <tt>--email=address</tt>    Author's email (<em>required</em>)
<dd>Give credit where credit is due.</p>
<dt><tt>--builder=module Build with 'ExtUtils::MakeMaker' or 'Module::Build'</tt>
<dd>These options control what style of module building system will be used.
Installation of an <tt>ExtUtils::MakeMaker</tt> based module uses the
traditional

<pre>perl Makefile.PL; make; make install</pre>

incantation whereas Module::Build uses the new-fangled, <tt>make</tt>-free

<pre>perl Build.PL; ./Build; ./Build install</pre>

If you're new to creating modules, the latter can be a friendlier way to go.
</dl>

<h4><a name="an_example_">An Example:</a></h4>
<p>Let's look at what it does, using a hypothetical <tt>Toy::Factory</tt>
as an example:</p>

<pre>
 santa@northpole:~ $ module-starter --verbose --module=Toy::Factory \
 --author=&quot;Kris Kringle&quot; --email=santa@northpole.com --builder=Module::Build<span class="c">
 Created Toy-Factory
 Created Toy-Factory/lib/Toy
 Created Toy-Factory/lib/Toy/Factory.pm
 Created Toy-Factory/t
 Created Toy-Factory/t/pod-coverage.t
 Created Toy-Factory/t/pod.t
 Created Toy-Factory/t/boilerplate.t
 Created Toy-Factory/t/00-load.t
 Created Toy-Factory/.cvsignore
 Created Toy-Factory/Build.PL
 Created Toy-Factory/MANIFEST
 Created starter directories and files</span>
</pre>

<p>And so <tt>module-starter</tt> created a skeleton for us to start
working with, complete with sample tests. Can we build it?</p>

<pre>
 santa@northpole:~ $ cd Toy-Factory
 santa@northpole:~/Toy-Factory $ perl Build.PL<span class="c">
 Checking whether your kit is complete...
 WARNING: the following files are missing in your kit:
         META.yml
 Please inform the author.

 Checking prerequisites...
 Looks good

 Creating new 'Build' script for 'Toy-Factory' version '0.01'</span>
 santa@northpole:~/Toy-Factory $ ./Build<span class="c">
 lib/Toy/Factory.pm -&gt; blib/lib/Toy/Factory.pm
 Manifying blib/lib/Toy/Factory.pm -&gt; blib/libdoc/Toy::Factory.3pm</span>
</pre>

<p>Yes we can! But I wonder if it passes its tests?</p>

<pre>
 santa@northpole:~/Toy-Factory $ ./Build test<span class="c">
 t/00-load.........ok 1/1# Testing Toy::Factory 0.01, Perl 5.008006, /usr/bin/perl
 t/00-load.........ok                                                        
 t/boilerplate.....NOK 1/3                                                   
 #   Failed test 'README contains boilerplate text'
 #   in t/boilerplate.t at line 23.
 # The README is used... appears on lines 3
 # 'version information here' appears on lines 11
 t/boilerplate.....NOK 2/3                                                   
 #   Failed test 'Changes contains boilerplate text'
 #   in t/boilerplate.t at line 23.
 # placeholder date/time appears on lines 3
 t/boilerplate.....NOK 3/3                                                   
 #   Failed test 'lib/Toy/Factory.pm contains boilerplate text'
 #   in t/boilerplate.t at line 23.
 # stub function definition appears on lines 36 40 43 47
 # boilerplate description appears on lines 20
 # the great new $MODULENAME appears on lines 8
 # Looks like you failed 3 tests of 3.
 t/boilerplate.....dubious                                                   
         Test returned status 3 (wstat 768, 0x300)
 DIED. FAILED tests 1-3
         Failed 3/3 tests, 0.00% okay
 t/pod-coverage....ok                                                        
 t/pod.............ok                                                        
 Failed Test     Stat Wstat Total Fail  List of Failed
 -------------------------------------------------------------------------------
 t/boilerplate.t    3   768     3    3  1-3
 Failed 1/4 test scripts. 3/6 subtests failed.
 Files=4, Tests=6,  2 wallclock secs ( 0.84 cusr +  0.21 csys =  1.05 CPU)
 Failed 1/4 test programs. 3/6 subtests failed.</span>
</pre>

<p>Doh! As a part of the framework it provided <tt>module-starter</tt> created 
sample <tt>README</tt> and <tt>Changes</tt> files, as well as tests to
check these files and ensure that we've replaced the default text with
something more meaningful. If you've ever noticed a module on CPAN that claims
to be a "Perl extension for blah blah blah" you can appreciate how these
tests would have come in handy. In addition, these POD tests will raise your
module's <a href="http://cpants.perl.org/kwalitee.html">Kwalitee</a> score on
<a href="http://cpants.perl.org/index.html">CPANTS</a>.
</p>

<p>After editing <tt>lib/Toy/Factory.pm</tt>,
<tt>README</tt> and <tt>Changes</tt> appropriately let's try this again:</p>

<pre>
 santa@northpole:~/Toy-Factory $ ./Build test<span class="c">
 Deleting blib/lib/Toy/Factory.pm
 lib/Toy/Factory.pm -&gt; blib/lib/Toy/Factory.pm
 t/00-load.........ok 1/1# Testing Toy::Factory 0.01, Perl 5.008006, /usr/bin/perl
 t/00-load.........ok                                                        
 t/boilerplate.....ok                                                        
 t/pod-coverage....ok                                                        
 t/pod.............ok                                                        
 All tests successful.
 Files=4, Tests=6,  2 wallclock secs ( 0.83 cusr +  0.22 csys =  1.05 CPU)</span>
</pre>

<p>Great! We're all set to teach <tt>Toy::Factory</tt> how to make toys. But
what about that warning we got when we first built it, about <tt>META.yml</tt>
missing? <tt>META.yml</tt> is created auotmagically when you issue the
<tt>./Build dist</tt> command.</p>

<pre>
 santa@northpole:~/Toy-Factory $ ./Build dist<span class="c">
 Creating META.yml
 Creating Toy-Factory-0.01
 Creating Toy-Factory-0.01.tar.gz
 tar cf Toy-Factory-0.01.tar Toy-Factory-0.01
 gzip Toy-Factory-0.01.tar
 Deleting Toy-Factory-0.01</span>
</pre>

<p>Now we won't get that pesky error the next time we build! This also
created the tarball we'd use to distribute our module,
<tt>Toy-Factory-0.01.tar.gz</tt>.</p>

<pre>
 santa@northpole:~/Toy-Factory $ perl Build.PL<span class="c">
 Checking whether your kit is complete...
 Looks good

 Checking prerequisites...
 Looks good

 Deleting Build
 Removed previous script 'Build'

 Creating new 'Build' script for 'Toy-Factory' version '0.01'</span>
</pre>

<p>If only building a real toy factory was so easy!</p>

<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
<b>Editor's note</b>: <tt>Module::Starter</tt> is pluggable, and you could
therefore create a subclass which generates templates suited to your
organization's needs.</blockquote>

</body>
</html>
