<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Sun Dec  3 23:23:11 2006 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2006 Perl Advent Calendar: Olly Olly Oxen Free</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<H1><A HREF="../">Perl Advent Calendar 2006-12</A>-08</H1>
<H2 ALIGN="CENTER">Olly Olly Oxen Free</H2>
<H3 ALIGN="CENTER">by Jerrad Pierce</H3>
<p>Sometimes an RDBMS is overkill, even something as simple as
<a href="../../2002/3/">SQLite</a> is more of a dependency than you might like.
More importantly, what if you only need "pseudorandom" access? There are
several alternatives including a DBM or a hand-rolled index. Another option,
which may allow you to leave your data file unaltered, is
<a href="http://search.cpan.org/search?module=File::SortedSeek">File::SortedSeek</a></tt>.
If your data happens to be sorted, like a dictionary, this module can provide
speedier access to records than a linear search through the file. It provides
three search methods: <tt>alphabetic</tt>, <tt>numeric</tt>, and temporal
(<tt>find_time</tt>). The latter being a special case of <tt>numeric</tt> which
can be used to locate records in logfiles. <tt>File::SortedSeek</tt> also
provides functions to access records between two search results and to retrieve
the last N records. <a name="UPDATE"><!-- 2006-12-10 --></a> Also note that
<tt>Search::Dict</tt>, which is part of the core, provides the same
functionality as <tt>alphabetic</tt> and enough hooks that with the proper
parameters other <tt>File::SortedSeek</tt> features could be reproduced.</p>

<a name="-top-"></a>
<h1><a href="mod8.pl">mod8.pl</a></h1>
<hr />
<pre>
   1 <span class="k">use</span> <span class="w">File::SortedSeek</span> <span class="q">':all'</span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">Search::Dict</span><span class="sc">;</span>
   3 
   4 <span class="k">my</span> <span class="i">$DICT</span><span class="sc">;</span>
   5 <span class="k">open</span><span class="s">(</span><span class="i">$DICT</span>=<span class="q">'/usr/dict/words'</span><span class="cm">,</span> <span class="i">$DICT</span><span class="s">)</span> &amp;&amp; <span class="k">do</span> <span class="s">{</span>
   6   <span class="k">my</span> <span class="i">$pos</span><span class="sc">;</span>
   7 
   8   <span class="c">#Discard the returned position tell() of the closest result: Wasserman</span>
   9   <span class="c">#Optional custom munge routine to normalize case else result is: would</span>
  10   <span class="i">alphabetic</span><span class="s">(</span><span class="i">$DICT</span><span class="cm">,</span> <span class="q">'wassail'</span><span class="cm">,</span> \<span class="i">&amp;munge</span><span class="s">)</span><span class="sc">;</span>
  11 
  12   <span class="c">#And print it; scalar context to avoid reading the whole file</span>
  13   <span class="k">print</span> <span class="k">scalar</span> <span class="q">&lt;$DICT&gt;</span><span class="sc">;</span>
  14 
  15   <span class="c">#Try again, it automatically seeks so no need to reset</span>
  16   <span class="k">my</span> <span class="i">$pos</span> = <span class="i">alphabetic</span><span class="s">(</span><span class="i">$DICT</span><span class="cm">,</span> <span class="q">'mistletoe'</span><span class="cm">,</span> \<span class="i">&amp;munge</span><span class="s">)</span><span class="sc">;</span>
  17   
  18   <span class="c">#This time we checked if we got what we wanted, alas :all *isn't*</span>
  19   <span class="k">printf</span><span class="s">(</span><span class="q">&quot;In %s at byte %i found exactly: %s&quot;</span><span class="cm">,</span> <span class="i">$DICT</span><span class="cm">,</span> <span class="i">$pos</span><span class="cm">,</span> <span class="k">scalar</span> <span class="q">&lt;$DICT&gt;</span><span class="s">)</span>
  20     <span class="k">if</span> <span class="i">File::SortedSeek::was_exact</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  21 
  22 
  23   <span class="c">#Core distribution alternative</span>
  24   <span class="i">$pos</span> = <span class="i">look</span><span class="s">(</span><span class="i">$DICT</span><span class="cm">,</span> <span class="q">'mistletoe'</span><span class="s">)</span><span class="sc">;</span>
  25   <span class="k">printf</span><span class="s">(</span><span class="q">&quot;In %s at byte %i found exactly: %s&quot;</span><span class="cm">,</span> <span class="i">$DICT</span><span class="cm">,</span> <span class="i">$pos</span><span class="cm">,</span> <span class="k">scalar</span> <span class="q">&lt;$DICT&gt;</span><span class="s">)</span>
  26 <span class="s">}</span><span class="sc">;</span>
  27 
  28 
<a name="munge-"></a>  29 <span class="k">sub </span><span class="m">munge</span><span class="s">{</span>
  30   <span class="k">local</span> <span class="i">$_</span> = <span class="k">shift</span> || <span class="k">return</span> <span class="k">undef</span><span class="sc">;</span>
  31   <span class="k">chomp</span><span class="sc">;</span>
  32   <span class="k">return</span> <span class="k">lc</span> <span class="i">$_</span>
  33 <span class="s">}</span>
</pre>
</body>
</html>
