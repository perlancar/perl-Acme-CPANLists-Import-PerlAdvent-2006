<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<HTML>
<HEAD>
	<META HTTP-EQUIV="CONTENT-TYPE" CONTENT="text/html; charset=iso-8859-1">
	<TITLE>2006 Perl Advent Calendar: Data decorating the tips of a Christmas Treemap</TITLE>
	<!-- Generated by perltidy and edited frequently -->
	<link rel="stylesheet" href="../style.css" type="text/css" />
</HEAD>

<BODY>

<H1><A HREF="../../advent">Perl Advent Calendar 2006-12</A>-03</H1>
<H2 ALIGN="CENTER">Trimming the Treemap (with Data)</H2>
<H3 ALIGN="CENTER">by Bill Ricker</H3>

<P><A HREF="http://en.wikipedia.org/wiki/Treemap">Treemaps</A> have
been around for over a decade. Ben Schneiderman, one of the great
user-interface gurus, developed the first one to manage the disk
space on his UMD server, and <A HREF="http://www.cs.umd.edu/hcil/treemap-history/">documents
their evolution</A>. They've since been adapted to network
bandwidths, internet community mapping, <A HREF="http://www.smartmoney.com/marketmap/?adv=Tools">stock
markets </A>(a Treemap combined with a <A HREF="http://en.wikipedia.org/wiki/Heat_map">Heatmap</A>
to show gain/loss), and contest scores, among other applications.
Many programmers know there are commercial and free Java
implementations, but may be unaware that CPAN has a module,
<TT><A HREF="http://search.cpan.org/search?module=Treemap">Treemap</A></TT>,
which implements several of the top variant algorithms in Perl, and
uses the labeling format of the Internet community map. The following Treemap
(created with the module's example <tt>Dir_Squarified_Imager</tt>) portrays
my <tt>/usr/lib/perl/</tt> file tree graphically, and yields a few (now) fairly
obvious surprises that would be hard to find with <tt>ls</tt>.
</P

<pre>$ perl examples/Dir_Squarified_Imager.t.pl lib_perl.png /usr/lib/perl5/</pre>

<IMG SRC="lib_perl.png" ALT="Usage tree-map of /usr/lib/perl" WIDTH="884" HEIGHT="663" BORDER="0"><BR CLEAR="LEFT">

<P>We can easily see that:
</P>
<UL>
	<LI><P>my system has been upgraded a few times, there are several
	version-specific 5.8.\d sub-dirs, with different contents;
	</P>
	<LI><P>The <tt>Imager</tt> package that I installed as a prerequisite
	for Treemap has a fairly big shared library (large purple block, middle
	right);</P>
	<LI><P>The Unicode core, and it's cousin <tt>Encode</tt>, are each bigger than the language's (<tt>libperl.a</tt>&hellip;)!
	</P>
</UL>

<P>This is great for finding duplicate and surprisingly big packages
and (when run via <tt>sudo</tt>) the biggest disk abusers. But can be used for
so much more, and with Perl it's easy to hook it up to any datasource you like.
</P>

<P>I happen to provide tehnical support for a .ORG website that produces some
interesting numerical data ever year, so I decided to try using
<tt>Treemap</tt>. It wasn't quite as easy as it looks, but I had some fun and
made some nifty graphics. Some difficulties I encountered include:</P>

<UL>

<LI><P>It requires
<TT><A HREF="http://search.cpan.org/search?module=Treemap">Imager</A></TT>
as a prerequisite, which is a C-based extension to write PNG,
GIF, etc. (Windows users should be able to get this from <a herf="http://cpan.uwinnipeg.ca/dist/Imager">ActiveState
or another PPM host</a>.). </P></LI>

<LI><P>The documentation is thin, the examples work, if they're run from the right directory.
</P></LI>

<LI><P>
Inheritance from a baseclass is used, but three objects must be created and tied together.
Notes seem to indicate a desire to someday handle the input and output sub-object creation by parameter,
but for now must create a <tt>Treemap</tt> object with
<tt>INPUT=&gt;</tt> option of the <tt>Treemap::Input::XML</tt> or <tt>Treemap::Input::Dir</tt> object,
and  <tt>OUTPUT=&gt;Treemap::Output::Imager</tt>.
The sub-class of the main object determines the layout strategy - choice of three,
<tt>Treemap::Simple</tt>, <tt>Treemap::Squarified</tt>, or <tt>Treemap::Strip</tt>.
I eventually figured out from examples and the source which options apply to which object.
</P></LI>

<LI><P><tt>map</tt> is a poor <tt>sub</tt> name (in <tt>Treemap</tt>,
overridden in <tt>Tm:Strip</tt>),
as it overloads a builtin function with a method of same name.
(The other subclasses override <tt>_map</tt> and <tt>_shrink</tt> instead.)
Perl isn't confused, since methods and subs are called differently,
but it will confuse syntax coloring editors and folks reading sources.
</P></LI>

<LI><P><tt>Treemap</tt> doesn't have <tt>&lt;IMAGEMAP&gt</tt> support yet.
</P></LI>

<LI><P>While XML is generic and Directories are the most common usage,
if your data isn't on a WebService but rather a boring old database,
a DBI or CSV input filter would be very useful.<sup><a href="#1">1</a></sup>
 I had to decipher the desired XML structure
to get
<TT><A HREF="http://search.cpan.org/search?module=XML::Simple">XML::Simple</A></TT>
to generate the desired XML and use
<TT><A HREF="http://search.cpan.org/search?module=Text::CSV">Text::CSV</A></TT>
pick my data as a pre-process. I should graft this into a <TT>Tree::Input::CSV</TT>
module ...
</P></LI>

<LI><P>The example scripts have just about everything hardcoded or defaulting. I made an extended version of the example script that uses <TT>Getopt::Long</TT> to let me try different cobinations of formatting options.
</P></LI>
</UL>

<p>Using my modified canned example (<a href="#mod_3pl">below</a>) we process
the data like so:</p>

<PRE>
$ for pn in ~/fd/FD_2006_*.xml
&gt; do  fn=${pn##*/}
&gt;  perl -I ../Treemap-0.2/  mod3.pl --padding=0 --spacing=1 \
&gt;         --fontdir=/usr/share/fonts/TTF --font=Vera $pn ${fn%%.*}.png
&gt;  echo $fn ${fn%%.*}.png done
&gt;  done<span class="c">
 Loading /home/wdr/fd/FD_2006_ClassNatl.xml...
 FD_2006_ClassNatl.xml <a href="FD_2006_ClassNatl.png">FD_2006_ClassNatl.png</a> done

 Loading /home/wdr/fd/FD_2006_ClassSect.xml...
 FD_2006_ClassSect.xml <a href="FD_2006_ClassSect.png">FD_2006_ClassSect.png</a> done

 Loading /home/wdr/fd/FD_2006_DivClass.xml...
 FD_2006_DivClass.xml <a href="FD_2006_DivClass.png">FD_2006_DivClass.png</a> done

 Loading /home/wdr/fd/FD_2006_Sections.xml...
 FD_2006_Sections.xml <a href="FD_2006_Sections.png">FD_2006_Sections.png</a> done

 Loading /home/wdr/fd/<a href="FD_2006__EMA.xml">FD_2006__EMA</a>.xml...
 <a href="FD_2006__EMA.xml">FD_2006__EMA.xml</a> <a href="FD_2006__EMA.png">FD_2006__EMA.png</a> done</span>
</PRE>

<img src="FD_2006__EMA.png" height="600" width="800" alt="Eastern MA Field Day Contacts Chart">

<H2>About the Data</H2>

<P>In case you're wondering, this is the scoring results from Amateur
Radio Field Day, when ham radio stations around the country, many
operating in the field, try to contact each other for fun, publicity,
and points. The first image (inline) is the "zoom in" on just the Eastern Massachusetts Section (EMA).
Since this one is small, it's XML dataset <A HREF="FD_2006__EMA.xml">FD_2006__EMA.xml</A>
is also included.</P>

<P>
The later (linked only) images cover the full US &amp; even some "DX" (foreign, or Distance=DX) stations. 
The squares for the EMA stations in the first chart are colored 
blue (<font color="cyan">cyan</font>); and I've used
<font color="yellow">Yellow</font> for other New England Division sections. 
Class <font color="orange" face="arial">A</font> are <font color="orange">Field Stations</font>
in public places on emergency power, with <font color="blue" face="arial">B Battery</font>, C Car, D Domestic,
E Emergency Power (Home),
<font color="red" face="arial">F Fire/CD/Emergency-Op-Center</font>.   
The number before the class letter indicates the number of active transmitters, 
so <font size="+1" color="grey" face="arial">2A</font> means a club in a public place with 2 transmitters.
</P>

<P>Oh, and the funny letters like
<font color="#CC0000" face="arial">W1NVT</font> are the callsigns of the club stations. 
</P>

<P>I also ran a mid-range zoom, restricting
to just NE Division, in which I didn't bother to color the non-blue
squares -- it consists only of the squares yellow and blue in the
national charts.

<A HREF="FD_2006__NED.png" ALT="Field Day New England Division 2006" >FD_2006_NED.png</A>
</P>

<P>The site for which I prepared of these charts has a
<A HREF="http://ema.arrl.org/fd/history/score2006.html">fuller explanation of the charts</A> 
and of the whole <A HREF="http://ema.arrl.org/fd/">Field Day</A>,
and links to the parent organization for <A HREF="http://www.arrl.org/FandES/ead/">amateur radio concepts</A>.
</P>

<H1><A HREF="mod3.pl">mod3.pl</A>
<a name="mod3_pl">Generic TreeMap Script, mk 1</a> </H1>
<blockquote style="padding: 1em; border: 2px ridge black; background-color:#eee">
<h1><a name="synopsis">SYNOPSIS</a></h1>
<p>$0 [args] [infile] [outfile]</p>
<p>Options:</p>
<table><tr><td>-help</td>
<td>brief help</td>
</tr><tr><td>-ma</td>
<td>full doc</td>
</tr><tr><td>-verbose</td>
<td>any trace capbabilites in script, maybe none</td>
</tr><tr><td>-padding=5</td>
<td>interior space colored with parent node color; if 0, parent node colors vanish.</td>
</tr><tr><td>-spacing=5</td>
<td>exterior space colored with background color; if 0, squares split only by bkgcolor line.</td>
</tr><tr><td>-fontfile=../ImUgly.ttf</td>
<td>A font to use, can be used instead of next two or default</td>
</tr><tr><td>-font=arial</td>
<td>name of font to use, use with ...</td>
</tr><tr><td>-fontdir=/usr/share/fonts/corefonts&nbsp;</td>
<td>where to find fonts (with above)</td>
</tr><tr><td>-fontcolor='#RRGGBB'</td>
<td>Font color in pseudo-html rgb numeric string</td>
</tr></table>

<h1><a name="copyright">COPYRIGHT</a></h1>
<p>Copyright Bill Ricker 2006, based on Treemap examples.
This program is free software, to be used under the same terms are Perl itself.</p>
</blockquote>

<HR />

<pre>   1 #!/usr/bin/perl -l
   2
   3 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   4 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   5
   6 <span class="k">use</span> <span class="i">lib</span><span class="s">(</span> <span class="q">&quot;..&quot;</span> <span class="s">)</span><span class="sc">;</span>
   7 <span class="k">use</span> <span class="w">Treemap::Squarified</span><span class="sc">;</span>
   8 <span class="k">use</span> <span class="w">Treemap::Input::XML</span><span class="sc">;</span>
   9 <span class="k">use</span> <span class="w">Treemap::Output::Imager</span><span class="sc">;</span>
  10
  11 <span class="k">use</span> <span class="w">Getopt::Long</span><span class="sc">;</span>
  12 <span class="k">use</span> <span class="w">Pod::Usage</span><span class="sc">;</span>
  13 <span class="k">my</span> <span class="s">(</span><span class="i">$verbose</span><span class="cm">,</span><span class="i">$help</span><span class="cm">,</span> <span class="i">$man</span><span class="s">)</span><span class="sc">;</span>
  14
  15 <span class="k">my</span> <span class="s">(</span><span class="i">$padding</span><span class="cm">,</span> <span class="i">$spacing</span><span class="s">)</span>=<span class="s">(</span><span class="n">5</span><span class="cm">,</span><span class="n">5</span><span class="s">)</span><span class="sc">;</span>
  16 <span class="k">my</span> <span class="s">(</span><span class="i">$fontdir</span><span class="cm">,</span> <span class="i">$font</span><span class="cm">,</span><span class="i">$font_color</span><span class="s">)</span>=<span class="s">(</span><span class="k">undef</span><span class="cm">,</span><span class="q">&#39;ImUgly&#39;</span><span class="cm">,</span><span class="q">&#39;#000000&#39;</span><span class="s">)</span><span class="sc">;</span> <span class="c">## 00=&gt;Black</span>
  17 <span class="k">my</span> <span class="i">$fontfile</span><span class="sc">;</span>
  18 <span class="k">my</span> <span class="i">$outfile</span><span class="sc">;</span>
  19 <span class="k">my</span> <span class="i">$outtype</span>=<span class="q">&quot;png&quot;</span><span class="sc">;</span>
  20 <span class="k">my</span> <span class="i">$infile</span><span class="sc">;</span>
  21 <span class="k">my</span> <span class="s">(</span><span class="i">$width</span><span class="cm">,</span><span class="i">$height</span><span class="s">)</span>=<span class="s">(</span><span class="n">800</span><span class="cm">,</span><span class="n">600</span><span class="s">)</span><span class="sc">;</span> <span class="c"># Fullscreen on small projector good default?</span>
  22
  23 <span class="k">my</span> <span class="i">$result</span> = <span class="w">GetOptions</span> <span class="s">(</span>
  24           <span class="q">&quot;padding=i&quot;</span> <span class="cm">=&gt;</span> \<span class="i">$padding</span><span class="cm">,</span>    <span class="c"># numeric</span>
  25           <span class="q">&quot;spacing=i&quot;</span> <span class="cm">=&gt;</span> \<span class="i">$spacing</span><span class="cm">,</span>    <span class="c"># numeric</span>
  26         <span class="c"># &quot;length=i&quot;  =&gt; \$length,     # numeric</span>
  27         <span class="c"># &quot;file=s&quot;    =&gt; \$data,       # string</span>
  28           <span class="q">&quot;infile=s&quot;</span>  <span class="cm">=&gt;</span> \<span class="i">$infile</span><span class="cm">,</span>     <span class="c"># string</span>
  29           <span class="q">&quot;outfile=s&quot;</span> <span class="cm">=&gt;</span> \<span class="i">$outfile</span><span class="cm">,</span>    <span class="c"># string</span>
  30           <span class="q">&quot;outtype=s&quot;</span> <span class="cm">=&gt;</span> \<span class="i">$outfile</span><span class="cm">,</span>    <span class="c"># string</span>
  31           <span class="q">&quot;fontdir=s&quot;</span> <span class="cm">=&gt;</span> \<span class="i">$fontdir</span><span class="cm">,</span>    <span class="c"># string</span>
  32           <span class="q">&quot;font=s&quot;</span>    <span class="cm">=&gt;</span> \<span class="i">$font</span><span class="cm">,</span>       <span class="c"># string</span>
  33           <span class="q">&quot;fontfile=s&quot;</span><span class="cm">=&gt;</span> \<span class="i">$fontfile</span><span class="cm">,</span>   <span class="c"># string</span>
  34           <span class="q">&quot;fontcolor=s&quot;</span><span class="cm">=&gt;</span>\<span class="i">$font_color</span><span class="cm">,</span> <span class="c"># string</span>
  36
  37           <span class="q">&quot;verbose|v|V&quot;</span><span class="cm">=&gt;</span>\<span class="i">$verbose</span><span class="cm">,</span>    <span class="c"># flag</span>
  38             <span class="q">&quot;help|h|?&quot;</span> <span class="cm">=&gt;</span>\<span class="i">$help</span><span class="cm">,</span>
  39             <span class="q">&quot;man&quot;</span>      <span class="cm">=&gt;</span>\<span class="i">$man</span><span class="cm">,</span>
  40         <span class="s">)</span> <span class="k">or</span> <span class="i">pod2usage</span><span class="s">(</span><span class="n">2</span><span class="s">)</span><span class="sc">;</span>
  41            <span class="i">pod2usage</span><span class="s">(</span><span class="n">1</span><span class="s">)</span> <span class="k">if</span> <span class="i">$help</span><span class="sc">;</span>
  42            <span class="i">pod2usage</span><span class="s">(</span>-<span class="w">exitstatus</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="cm">,</span> -<span class="w">verbose</span> <span class="cm">=&gt;</span> <span class="n">2</span><span class="s">)</span> <span class="k">if</span> <span class="i">$man</span><span class="sc">;</span>
  43
  44 <span class="c">### TBD - could add a couple more options ...</span>
  45 <span class="c"># BORDER_COLOUR MIN_FONT_SIZE TEXT_DEBUG DEBUG</span>
  46 <span class="c">## Will also need to pass args to a CSV input parser ...</span>
  47 <span class="c">##</span>
  48
  49
  50 <span class="c"># Default cascades</span>
  51 <span class="i">$infile</span> ||= <span class="k">shift</span> || <span class="q">&quot;XML.xml&quot;</span><span class="sc">;</span>
  52 <span class="k">print</span> <span class="q">&quot;infile=&gt;$infile&quot;</span> <span class="k">if</span> <span class="i">$verbose</span><span class="sc">;</span>
  53
  54 <span class="i">$outfile</span> ||= <span class="k">shift</span> || <span class="q">&quot;$infile.$outtype&quot;</span><span class="sc">;</span>
  55 <span class="k">print</span> <span class="q">&quot;outfile=&gt;$outfile&quot;</span> <span class="k">if</span> <span class="i">$verbose</span><span class="sc">;</span>
  56
  57 <span class="k">if</span> <span class="s">(</span><span class="i">$font</span> &amp;&amp; ! <span class="i">$fontfile</span> &amp;&amp; ! <span class="i">$fontdir</span><span class="s">)</span>
  58 <span class="s">{</span>
  59    <span class="k">my</span> <span class="i">@fonts</span> = <span class="k">grep</span> <span class="s">{</span> <span class="k">-f</span> <span class="i">$_</span><span class="s">}</span> <span class="k">map</span> <span class="s">{</span><span class="q">&quot;$_/$font.ttf&quot;</span><span class="s">}</span> <span class="s">(</span><span class="k">glob</span><span class="s">(</span><span class="q">&#39;~/.fonts&#39;</span><span class="s">)</span><span class="cm">,</span><span class="k">glob</span><span class="s">(</span><span class="q">&#39;~/.fonts/*&#39;</span><span class="s">)</span><span class="cm">,</span><span class="k">glob</span><span class="s">(</span><span class="q">&#39;/usr/share/fonts/*&#39;</span><span class="s">)</span><span class="s">)</span><span class="sc">;</span>
  60    <span class="i">$fontfile</span> = <span class="k">pop</span> <span class="i">@fonts</span> || <span class="s">(</span><span class="k">warn</span> <span class="q">&quot;No matching font in .font or /usr/share/fonts&quot;</span><span class="s">)</span>&amp;&amp;<span class="q">&#39;&#39;</span><span class="sc">;</span>
  61 <span class="s">}</span>
  62
  63 <span class="i">$fontfile</span> ||= <span class="q">&quot;$fontdir/$font.ttf&quot;</span> <span class="k">if</span> <span class="i">$font</span> &amp;&amp; <span class="i">$fontdir</span><span class="sc">;</span>
  64 <span class="i">$fontfile</span> ||= <span class="q">&#39;../ImUgly.ttf&#39;</span><span class="sc">;</span>
  65 <span class="k">print</span> <span class="q">&quot;font=&gt;$fontfile&quot;</span> <span class="k">if</span> <span class="i">$verbose</span><span class="sc">;</span>
  66
  67 <span class="k">print</span> <span class="q">&quot;$width x $height ($padding, $spacing)&quot;</span> <span class="k">if</span> <span class="i">$verbose</span><span class="sc">;</span>
  68
  69 <span class="c">## Input</span>
  70 <span class="c">#</span>
  71 <span class="k">my</span> <span class="i">$input</span> = <span class="w">new</span> <span class="w">Treemap::Input::XML</span><span class="sc">;</span> <span class="c">## @TBD -- suggested autoloading Input type, output type?</span>
  72 <span class="k">print</span> <span class="q">&quot;Loading $infile...\n&quot;</span><span class="sc">;</span>
  73 <span class="i">$input</span><span class="i">-&gt;load</span><span class="s">(</span> <span class="i">$infile</span> <span class="s">)</span><span class="sc">;</span>
  74
  75 <span class="c">## Output</span>
  76 <span class="c">#</span>
  77 <span class="k">my</span> <span class="i">$output</span> = <span class="w">new</span> <span class="i">Treemap::Output::Imager</span><span class="s">(</span> <span class="w">WIDTH</span><span class="cm">=&gt;</span><span class="i">$width</span><span class="cm">,</span> <span class="w">HEIGHT</span><span class="cm">=&gt;</span><span class="i">$height</span><span class="cm">,</span>
  78         <span class="w">FONT_FILE</span><span class="cm">=&gt;</span><span class="i">$fontfile</span><span class="cm">,</span>
  79         <span class="w">FONT_COLOUR</span><span class="cm">=&gt;</span><span class="i">$font_color</span><span class="cm">,</span>
  80         <span class="s">)</span><span class="sc">;</span>
  81
  82 <span class="c">## Splice them together with Layout object</span>
  83 <span class="c">#</span>
  84 <span class="k">my</span> <span class="i">$treemap</span> = <span class="w">new</span> <span class="i">Treemap::Squarified</span><span class="s">(</span> <span class="w">INPUT</span><span class="cm">=&gt;</span><span class="i">$input</span><span class="cm">,</span> <span class="w">OUTPUT</span><span class="cm">=&gt;</span><span class="i">$output</span><span class="cm">,</span>
  85         <span class="w">PADDING</span><span class="cm">=&gt;</span><span class="i">$padding</span><span class="cm">,</span>
  86         <span class="w">SPACING</span><span class="cm">=&gt;</span><span class="i">$spacing</span><span class="cm">,</span>
  87         <span class="s">)</span><span class="sc">;</span>
  88
  89 <span class="c">## Do it</span>
  90 <span class="c">#</span>
  91 <span class="i">$treemap</span><span class="i">-&gt;map</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
  92 <span class="i">$output</span><span class="i">-&gt;save</span><span class="s">(</span><span class="i">$outfile</span><span class="s">)</span><span class="sc">;</span>
</pre>

<a name="1">1</a>. Shortly before going to press, I received word from the
module author that another user had submitted a patch for DBI support. Until
it propogates to CPAN you can nab the 0.04 treemap bundle with
Treemap::Input:DBI <a href="http://uc.org/read/Treemaps">from here</a>

</BODY>
</HTML>
