<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" 
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!-- Generated by perltidy on Thu Nov 30 18:10:54 2006 -->
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2006 Perl Advent Calendar: Warm, Fuzzy Coverage</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>
<h1><a href="../">Perl Advent Calendar 2006-12</a>-21</h1>
<h2 align="center">Warm, Fuzzy Coverage</h2>
<h3 align="center">by David Westbrook &amp; Jerrad Pierce</h3>

<P>Ever wonder what parts of your code are actually used? Perhaps to see what
can be thrown away when refactoring? Or better still, to determine how thorough
your test suite is?
<tt><A HREF="http://search.cpan.org/search?module=Devel%3A%3ACover">Devel::Cover</A></tt>
will answer all of those questions and many more <sup><a href="#1">1</a></sup>
by providing code coverage metrics. In short, this means you can get pretty
HTML tables showing you what percent of subroutines, branches, statements,
and conditions are being executed. Let's take a look at the coverage of a
small <a href="mod21A.pl">snippet</a> that uses a hypothetical
<tt><a href="#A_S">Acme::Santa</a></tt> module.</P>

<pre>
<span class="k">my</span> <span class="i">%list</span> = <span class="s">(</span> <span class="w">David</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'White Christmas'</span><span class="cm">,</span> <span class="q">'Candy Cane'</span> <span class="s">]</span> <span class="s">)</span><span class="sc">;</span>
<span class="k">my</span> <span class="i">$Santa</span> = <span class="w">Acme::Santa</span><span class="w">-&gt;new</span><span class="s">(</span><span class="s">)</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;make_a_list</span><span class="s">(</span> <span class="i">%list</span> <span class="s">)</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;check_it_twice</span><span class="sc">;</span>
</pre>


<P>So how much of <tt>Acme::Santa</tt> does this really use? To find out, we
can inspect our script by executing it under <tt>Devel::Cover</tt>:

<PRE>
<span class="c"># Clear the default database 'cover_db' to remove stats from any prior run</span>
$ cover -delete -silent
<span class="c"># Options to only collect stats for Acme::* and use the default db</span>
$ perl -MDevel::Cover=-ignore,.,-select,Acme snippet.pl
<span class="c"># Simple console coverage report</span>
$ cover
<span class="c">
File                                  stmt   bran   cond    sub   time  total
----------------------------------- ------ ------ ------ ------ ------ ------
Acme/Santa.pm                         72.4   50.0   40.0   66.7  100.0   65.2
</span></PRE>

<P>That's not too impressive, our little script doesn't seem to exercise the
module very well. But what exactly aren't we using? Luckily, we installed the
optional prerequisites and <tt>Devel::Cover</tt> generated a pretty HTML report
for us to show-off and examine (below). The
<A HREF="mod21A.html#subroutine" target="iframe">sub coverage</A>
section indicates that two routines were missed completely. The
<A HREF="mod21A.html#file" target="iframe">entire file coverage</A> section
highlights specific statements that were missed, such as line 29
and lines 38-41. They were never reached because previous
<A HREF="mod21A.html#condition" target="iframe">conditions</A> were not met.
</P>

<iframe height="240" width="100%" name="iframe" src="mod21A.html">
<a href="mod21A.html">snippet coverage</a></iframe>

<p>But our snippet is intended to be simple, and has no need for
gravity-defying caribou. So what good is this? Well, we all know test suites
are important for verifying that the code functions as intended. Coverage
statistics are just as important in determining whether the test suite is
probing every aspect of the code. So, what if we wanted to adapt our snippet
for use as a part of
<tt>Acme::Santa</tt>'s test suite? We might end up with something like
<a href="mod21B.pl">the following</a>, which gets us
<a href="mod21B.html">100% coverage</a> on all fronts:
<PRE>
<span class="k">my</span> <span class="i">%list</span> = <span class="s">(</span>
  <span class="w">David</span>      <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'White Christmas'</span> <span class="s">]</span><span class="cm">,</span>
  <span class="w">Grinch</span>     <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'Christmas Theft'</span> <span class="s">]</span><span class="cm">,</span>
  <span class="w">Satan</span>      <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'Fire'</span><span class="cm">,</span> <span class="q">'Brimestome'</span> <span class="s">]</span><span class="cm">,</span>
  <span class="q">'Dr. Evil'</span> <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'World Domination'</span> <span class="s">]</span><span class="cm">,</span>
<span class="s">)</span><span class="sc">;</span>
<span class="k">my</span> <span class="i">%list2</span> = <span class="s">(</span>
  <span class="w">David</span>      <span class="cm">=&gt;</span> <span class="s">[</span> <span class="q">'Candy Cane'</span> <span class="s">]</span><span class="cm">,</span>
<span class="s">)</span><span class="sc">;</span>

<span class="k">my</span> <span class="i">$Santa</span> = <span class="w">Acme::Santa</span><span class="w">-&gt;new</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;make_a_list</span><span class="s">(</span> <span class="i">%list</span> <span class="s">)</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;make_a_list</span><span class="s">(</span> <span class="i">%list2</span> <span class="s">)</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;check_it_twice</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;make_toys</span><span class="sc">;</span>
<span class="i">$Santa</span><span class="i">-&gt;fly_reindeer</span><span class="sc">;</span>
</PRE>

<p>Could we verify that this test script, or some combination of scripts in our
test suite results in total test coverage without running each manually? To
merge these two worlds, you can can generate coverage statistics for modules
that are not yet installed from their build directories from the
<tt>t/*.t</tt> test suite<sup><a href="#2">2</a></sup> with the following:</P>

<PRE>
<span class="c"># Clear the default database 'cover_db' to remove stats from any prior run</span>
$ cover -delete
$ make test HARNESS_PERL_SWITCHES=-MDevel::Cover<span class="c">&hellip;</span>
</PRE>

<H1><A href="Santa.pm">Acme::Santa</A></H1>
<HR>
<pre>
   1 <span class="k">package </span><span class="i"><a name="A_S">Acme::Santa</a></span><span class="sc">;</span>
   2 <span class="k">use</span> <span class="w">strict</span><span class="sc">;</span>
   3 <span class="k">use</span> <span class="w">warnings</span><span class="sc">;</span>
   4 
   5 <span class="k">use</span> <span class="w">constant</span> <span class="i">NAUGHTY</span> <span class="cm">=&gt;</span> <span class="n">0</span><span class="sc">;</span>
   6 <span class="k">use</span> <span class="w">constant</span> <span class="i">NICE</span>    <span class="cm">=&gt;</span> <span class="n">1</span><span class="sc">;</span>
   7 
<a name="new-"></a>   8 <span class="k">sub </span><span class="m">new</span> <span class="s">{</span>
   9   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  10   <span class="k">bless</span> <span class="s">{</span> <span class="w">_list</span><span class="cm">=&gt;</span><span class="s">{</span><span class="s">}</span> <span class="s">}</span><span class="cm">,</span> <span class="i">$self</span><span class="sc">;</span>
  11 <span class="s">}</span>
  12 
<a name="make_a_list-"></a>  13 <span class="k">sub </span><span class="m">make_a_list</span> <span class="s">{</span>
  14   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  15   <span class="k">my</span> <span class="i">%list</span> = <span class="i">@_</span><span class="sc">;</span>
  16   <span class="k">my</span> <span class="i">$ct</span> = <span class="n">0</span><span class="sc">;</span>
  17   <span class="k">while</span><span class="s">(</span> <span class="k">my</span> <span class="s">(</span><span class="i">$k</span><span class="cm">,</span> <span class="i">$v</span><span class="s">)</span> = <span class="k">each</span> <span class="i">%list</span> <span class="s">)</span><span class="s">{</span>
  18     <span class="i">$ct</span> += <span class="i">@$v</span><span class="sc">;</span>
  19     <span class="i">$self</span>-&gt;{<span class="w">_list</span>}-&gt;{<span class="i">$k</span>} ||= <span class="s">[</span><span class="s">]</span><span class="sc">;</span>
  20     <span class="k">push</span> <span class="i">@</span>{<span class="i">$self</span>-&gt;{<span class="w">_list</span>}-&gt;{<span class="i">$k</span>}}<span class="cm">,</span> <span class="i">@$v</span><span class="sc">;</span>
  21   <span class="s">}</span>
  22   <span class="k">return</span> <span class="i">$ct</span><span class="sc">;</span>
  23 <span class="s">}</span>
  24 
<a name="check_it_twice-"></a>  25 <span class="k">sub </span><span class="m">check_it_twice</span> <span class="s">{</span>
  26   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  27   <span class="k">while</span><span class="s">(</span> <span class="k">my</span> <span class="s">(</span><span class="i">$who</span><span class="cm">,</span> <span class="i">$list</span><span class="s">)</span> = <span class="k">each</span> <span class="i">%</span>{<span class="i">$self</span>-&gt;{<span class="w">_list</span>}} <span class="s">)</span><span class="s">{</span>
  28     <span class="k">unless</span> <span class="s">(</span> <span class="i">$self</span><span class="i">-&gt;_is_naughty_or_nice</span><span class="s">(</span><span class="i">$who</span><span class="s">)</span> == <span class="i">NICE</span> <span class="s">)</span><span class="s">{</span>
  29       <span class="i">$_</span> = <span class="q">'coal'</span> <span class="k">for</span> <span class="i">@$list</span><span class="sc">;</span>
  30     <span class="s">}</span>
  31   <span class="s">}</span>
  32 <span class="s">}</span>
  33 
<a name="_is_naughty_or_nice-"></a>  34 <span class="k">sub </span><span class="m">_is_naughty_or_nice</span> <span class="s">{</span>
  35   <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span>
  36   <span class="k">my</span> <span class="i">$who</span> = <span class="k">shift</span><span class="sc">;</span>
  37   <span class="k">if</span><span class="s">(</span> <span class="i">$who</span> =~ <span class="q">/\bevil\b/i</span> || <span class="i">$who</span> =~ <span class="q">/\bsatan\b/i</span><span class="s">)</span><span class="s">{</span>
  38     <span class="k">return</span> <span class="i">NAUGHTY</span><span class="sc">;</span>
  39   <span class="s">}</span><span class="k">elsif</span><span class="s">(</span> <span class="i">$who</span> =~ <span class="q">/\bgrinch\b/i</span> <span class="s">)</span><span class="s">{</span>
  40     <span class="k">sleep</span> <span class="n">1</span><span class="sc">;</span>
  41     <span class="k">return</span> <span class="i">NAUGHTY</span><span class="sc">;</span>
  42   <span class="s">}</span>
  43   <span class="k">return</span> <span class="i">NICE</span><span class="sc">;</span>
  44 <span class="s">}</span>
  45 
<a name="make_toys-"></a>  46 <span class="k">sub </span><span class="m">make_toys</span>    <span class="s">{</span> <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span> <span class="s">}</span>
<a name="fly_reindeer-"></a>  47 <span class="k">sub </span><span class="m">fly_reindeer</span> <span class="s">{</span> <span class="k">my</span> <span class="i">$self</span> = <span class="k">shift</span><span class="sc">;</span> <span class="s">}</span>
  48 
  49 <span class="n">1</span><span class="sc">;</span>
<a name="EOF-"></a></pre>

<H2>SEE ALSO</H2>

<A HREF="http://search.cpan.org/search?module=Devel%3A%3ACover">Devel::Cover</A>,
<A HREF="http://search.cpan.org/author/PJCJ/Devel-Cover-0.59/cover">cover</A>,
<A HREF="http://search.cpan.org/~pjcj/Devel-Cover-0.59/lib/Devel/Cover/Tutorial.pod">Devel::Cover::Tutorial</A>,
<A HREF="http://search.cpan.org/search?module=Pod%3A%3ACoverage">Pod::Coverage</A>

<h2>FOOTNOTES</h2>

<p><a name="1">1</a>.
Code taking forever to run when it should be speedy? Not sure if you
documented everything? <tt>Devel::Cover</tt> performs some limited profiling
and the results are included by the "time" column in portions of the coverage
report. Also, if <tt>Pod::Coverage</tt> is installed then
<tt>Devel::Cover</tt> will also include statistics about the kwalitee of the
documentation coverage as well.</p>

<p><a name="2">2</a>. Support for other frameworks exists as well.</p>

</body>
</html>
