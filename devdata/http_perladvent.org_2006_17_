<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2006 Perl Advent Calendar: Yule Log-Rolling</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>

<H1><A HREF="../">Perl Advent Calendar 2006-12</A>-17</H1>
<h2 align="center">Yule Log-Rolling</h2>
<h3 align="center">by Ben Prew</h3>

<P>When running automated processes, I find it incredibly useful to
have some sort of logging setup, so that I can see how long certain
parts of processing take. Or, even more importantly, if the process
dies, I can better determine what it was doing shortly before it bit
the dust.</P>

<P>At work, we have many automated and semi-automated processes that
run at a scheduled time. These processes all log to the same
directory, which makes it easier to find them. Also, I would like to
automatically rotate new files when they show up in this directory,
and not have to deal with any sort of configuration file.</P>

<P>I could have done this with <TT>logrotate</TT>, or some other
process, but I like doing things in Perl, and I didn't want to
interfere with existing archiving processes on the box. With
<tt><a href="http://search.cpan.org/search?module=Logfile::Rotate">Logfile::Rotate</a></tt>
I can eat my b&ucirc;che de N&ouml;el and have it too.</P>

<P>If I wanted to write a separate script to rotate all the log files
for me, it might look something like <A HREF="mod17e.pl">mod17e.pl</A> (external):</P>

<PRE>
   1 #!/usr/bin/perl;
   2 
   3 <span class="k">use</span> <span class="w">Logfile::Rotate</span><span class="sc">;</span>
   4 
   5 <span class="k">my</span> <span class="i">@logs</span> = <span class="k">map</span> <span class="s">{</span>
   6     <span class="k">my</span> <span class="i">$file</span> = <span class="i">$_</span><span class="sc">;</span>
   7     <span class="w">Logfile::Rotate</span><span class="w">-&gt;new</span><span class="s">(</span>
   8         <span class="w">File</span> <span class="cm">=&gt;</span> <span class="i">$file</span><span class="cm">,</span>
   9         <span class="w">Gzip</span> <span class="cm">=&gt;</span> <span class="q">&#39;lib&#39;</span><span class="cm">,</span>
  10         <span class="w">Dir</span> <span class="cm">=&gt;</span> <span class="q">&#39;/var/logs/dev.old&#39;</span><span class="cm">,</span>
  11         <span class="w">Post</span> <span class="cm">=&gt;</span> <span class="k">sub</span> <span class="s">{</span> <span class="k">unlink</span> <span class="i">$file</span> <span class="s">}</span> <span class="s">)</span><span class="sc">;</span> <span class="s">}</span> <span class="q">&lt;/var/logs/dev/*.log&gt;</span><span class="sc">;</span>
  12 
  13 <span class="k">for</span> <span class="s">(</span><span class="i">@logs</span><span class="s">)</span> <span class="s">{</span> <span class="i">$_</span><span class="i">-&gt;rotate</span><span class="s">(</span><span class="s">)</span> <span class="s">}</span>
</PRE>

<P>The default behavior is to leave an empty log file in the
directory, but all my processes will create their own files, if
needed, so I would rather just remove the file. This was easy to add
with the <TT>Post</TT> argument.</P>

<P>Another benefit of <TT>Logfile::Rotate</TT> is that unlike an
external binary, I can embed it in my existing code. All of our
current logging is done though a mix-in, so I've got a single point
of contact for each process that runs, regardless of where it logs
to.<BR><BR>This method is called <TT>log()</TT>, and it handles all
the logging for each file, as well as knowing which file to log to.
This also gives me more flexibility in how each log is rotated. A
rotation could be triggered by the process catching a signal, the
number of logged messages exceeding some threshold, the time elapsed
since last rotation, or the log growing too large (in an effort to
avoid filling the partition), etc.</P>

<P>So, if I wanted to rotate each log file at 100 Mb, regardless of
when it was last rotated, the code might look something like
<A HREF="mod17i.pl">mod17i.pl</A> (internal):</P>

<PRE>
   1 <span class="k">sub </span><span class="m">log</span>
   2 <span class="s">{</span>
   3     <span class="k">my</span> <span class="s">(</span><span class="i">$self</span><span class="cm">,</span> <span class="i">$message</span><span class="s">)</span> = <span class="i">@_</span><span class="sc">;</span>
   4 
   5     <span class="c"># logging stuff here.</span>
   6 
   7     <span class="k">if</span> <span class="s">(</span> <span class="s">(</span> <span class="k">-s</span> <span class="i">$self</span><span class="i">-&gt;filename</span> <span class="s">)</span> &gt; <span class="n">100_000_000</span><span class="s">)</span> <span class="s">{</span>
   8         <span class="w">Logfile::Rotate</span><span class="w">-&gt;new</span><span class="s">(</span>
   9             <span class="w">File</span> <span class="cm">=&gt;</span> <span class="i">$self</span><span class="i">-&gt;file_name</span><span class="cm">,</span>
  10             <span class="w">Gzip</span> <span class="cm">=&gt;</span> <span class="q">&#39;lib&#39;</span><span class="cm">,</span>
  11             <span class="w">Dir</span> <span class="cm">=&gt;</span> <span class="q">&#39;/var/logs/dev.old&#39;</span><span class="cm">,</span>
  12         <span class="s">)</span><span class="i">-&gt;rotate</span><span class="sc">;</span>
  13     <span class="s">}</span>
  14 <span class="s">}</span>
</PRE>

<P>Having the log files rotate themselves, how great is that! Now we
don't have any other external scripts or configurations to maintain.
Of course, the downside to this approach is the implicit <TT>stat()</TT>
on each call to <TT>log()</TT>, but it shouldn't add too much overhead.
This can even be alleviated if there is only one process that writes to the
log file, since you could then have a counter that is initialized to the
current size of the file and then adds the size of the message to the
counter. Then, once the counter reached <tt>100_000_000</tt>, you could
rotate the log file.</P>

<h2>SEE ALSO</h2>
<tt><a href="http://search.cpan.org/search?module=Log::Dispatch::FileRotate">Log::Dispatch::FileRotate</a></tt>,
<a href="http://www.linuxcommand.org/man_pages/logrotate8.html">logrotate(8)</a>
</BODY>
</HTML>
