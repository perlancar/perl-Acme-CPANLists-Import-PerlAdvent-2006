<?xml version="1.0" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>2006 Perl Advent Calendar: I'm Approximating a White Christmas</title>
<link rel="stylesheet" href="../style.css" type="text/css" /></head>
<body>

<H1><A HREF="../">Perl Advent Calendar 2006-12</A>-16</H1>
<h2 align="center">I'm Approximating a White Christmas</h2>
<h3 align="center">by Jerrad Pierce</h3>

<p>If you were searching CPAN for a means of carrying out calculations with
indeterminate values (as a model for determining if you'll have an off-white
xmas) you might stumble across
<tt><a href="http://search.cpan.org/search?module=Number::Uncertainty">Number::Uncertainty</a></tt>,
which would seem to be just what the Ph.D. ordered. And yet, you probably need
to be able to do more than add, subtract and multiply. Seeking a more complete
implementation with the full panoply of operators you discover
<tt><a href="http://search.cpan.org/search?module=Math::ErrorPropagation">Math::ErrorPropagation</a></tt>.
Depending upon your domain, this may be more than sufficient, but in all
likelihood you appreciated <tt>NumberUncertainty</tt>'s support for assymetric
error and are unsatisified with the limitations of variances. Exasperated, you
give it one more try and come up with
<tt><a href="http://search.cpan.org/search?module=Number::WithError">Number::WithError</a></tt>.</p>

<p><tt>Number:WithError</tt> might have a lot of (little used)
dependencies<sup><a href="#1">1</a></sup> but it seems to have all of the
features one could want including <a href="../../2005/8/">bignum</a>&mdash;i.e;
<tt>Math::BigFloat</tt>&mdash;compatiblity. You can PEMDAS, SohCahToa, and heap
on uncertainty to your heart's desire. Whether or not you end up with anything
more accurate than

<pre>
$ perl -le '<span class="k">print</span> +<span class="s">(</span><span class="q">&quot;Snow&quot;</span><span class="cm">,</span> <span class="q">&quot;!Snow&quot;</span><span class="s">)</span>[<span class="k">rand</span><span class="s">(</span><span class="n">2</span><span class="s">)</span>]'
</pre>

is another matter entirely.

<p>Code sample output:</p>

<pre><span class="c">x = 4.20e+01 + 1.20e+01 - 0.0e+00
y = 7.0e+00 +/- 2.0e+00

z =  x * y  = 2.94e+02 + 1.19e+02 - 8.4e+01
w =  x / y  = 6.0e+00 + 2.4e+00 - 1.7e+00
e = sqrt(y) = 2.65e+00 +/- 3.8e-01</span></pre>

<h1><a href="mod16.pl">mod16.pl</a></h1>
<hr />
<pre>
   1 #!/usr/bin/perl
   2 <span class="c">#use bignum;</span>
   3 <span class="k">use</span> <span class="w">Number::WithError</span><span class="sc">;</span>
   4 
   5 <span class="c">#The answer is 42, but it might be 54</span>
   6 <span class="k">my</span> <span class="i">$x</span> = <span class="w">Number::WithError</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">42</span><span class="cm">,</span> <span class="s">[</span><span class="n">12</span><span class="cm">,</span> <span class="n">0</span><span class="s">]</span><span class="s">)</span><span class="sc">;</span>
   7 
   8 <span class="c">#Somewhere's about 7</span>
   9 <span class="k">my</span> <span class="i">$y</span> = <span class="w">Number::WithError</span><span class="w">-&gt;new</span><span class="s">(</span><span class="n">7</span><span class="cm">,</span> <span class="n">2</span><span class="s">)</span><span class="sc">;</span>
  10 
  11 <span class="k">printf</span> <span class="q">&quot;x = %s\ny = %s\n\n&quot;</span><span class="cm">,</span> <span class="i">$x</span><span class="cm">,</span> <span class="i">$y</span><span class="sc">;</span>
  12 <span class="k">printf</span> <span class="q">&quot;z =  x * y  = %s\n&quot;</span><span class="cm">,</span> <span class="i">$z</span> = <span class="i">$x</span> * <span class="i">$y</span><span class="sc">;</span>
  13 <span class="k">printf</span> <span class="q">&quot;w =  x / y  = %s\n&quot;</span><span class="cm">,</span> <span class="i">$w</span> = <span class="i">$x</span> / <span class="i">$y</span><span class="sc">;</span>
  14 <span class="k">printf</span> <span class="q">&quot;e = sqrt(y) = %s\n&quot;</span><span class="cm">,</span> <span class="i">$e</span> = <span class="k">sqrt</span><span class="s">(</span><span class="i">$y</span><span class="s">)</span><span class="sc">;</span>
</pre>

<a name="1">1</a>.
<tt><a href="http://search.cpan.org/search?module=Math::Symbolic">Math::Symbolic</a></tt>,
<tt><a href="http://search.cpan.org/search?module=Math::Symbolic::Custom::Contains">Math::Symbolic::Custom::Contains</a></tt>,
<tt><a href="http://search.cpan.org/search?module=Math::SymbolicX::Inline">Math::SymbolicX::Inline</a></tt>,
<tt><a href="http://search.cpan.org/search?module=prefork">prefork</a></tt>,
<tt><a href="http://search.cpan.org/search?module=Params::Util">Params::Util</a></tt> and
<tt><a href="http://search.cpan.org/search?module=Test::LectroTest">Test::LectroTest</a></tt>.

If you'd rather avoid installing the first three, you can do so by commenting
out the following lines in v0.06 of <tt>Number::WithError</tt> <s>with no
apparent side-effects</s>:

<pre style="width: 80%; float:right"><s>  24 <span class="k">use</span> <span class="w">Math::SymbolicX::Inline</span> <span class="h">&lt;&lt;'HERE'</span><span class="sc">;</span>
  25 <span class="hh">my_tan = tan(arg0)</span>
  26 <span class="h">HERE</span>
</s></pre>

<p  style="clear: both">
The author points out in <a href="http://use.perl.org/~tsee/journal/31935">his
use Perl journal</a> that the non-apparent side-effects are some failed tests.
As the documentaiton notes though, <tt>tan()</tt> is never exposed, and must be
called as a method. For the following to work you should apply the
<a href="patch">patch</a> below:
</p>

<pre>$ perl -MNumber::WithError -le '<span class="k">print</span> <span class="i">Number::WithError</span><span class="i">-&gt;new</span><span class="s">(</span><span class="n">3.14159</span>/<span class="n">4</span><span class="s">)</span><span class="i">-&gt;tan</span><span class="s">(</span><span class="s">)</span>'
<span class="c">0.999998673205983</c></pre>

<pre><span class="c">--- Number-WithError-0.06/lib/Number/WithError.pm       Wed Aug 30 07:17:43 2006
+++ WithError.pm        Sun Dec 17 11:34:50 2006
@@ -6,7 +6,7 @@
 use Params::Util qw/_ARRAY _INSTANCE _ARRAY0/;
 use prefork 'Math::BigFloat';
 
-our $VERSION = '0.06';
+our $VERSION = '0.06_20061216';
 
 use base 'Exporter';
 our @EXPORT_OK = qw(
@@ -21,9 +21,10 @@
 our $CFloatCapture = qr/([+-]?)(?=\d|\.\d)(\d*)(\.\d*)?([Ee][+-]?\d+)?/;
 
 # define function "tan"
-use Math::SymbolicX::Inline <<'HERE';
-my_tan = tan(arg0)
-HERE
+#use Math::SymbolicX::Inline <<'HERE';
+#my_tan = tan(arg0)
+#HERE
+sub my_tan { CORE::sin($_[0]) / CORE::cos($_[0]) }
 
 =head1 NAME

</span></pre>
</body></html>
